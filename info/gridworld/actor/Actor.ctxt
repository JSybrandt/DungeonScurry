#BlueJ class context
comment0.params=
comment0.target=Actor()
comment0.text=\n\ Constructs\ a\ blue\ actor\ that\ is\ facing\ north.\n
comment1.params=
comment1.target=java.awt.Color\ getColor()
comment1.text=\n\ Gets\ the\ color\ of\ this\ actor.\n\ @return\ the\ color\ of\ this\ actor\n
comment10.params=newLocation
comment10.target=void\ moveTo(info.gridworld.grid.Location)
comment10.text=\n\ Moves\ this\ actor\ to\ a\ new\ location.\ If\ there\ is\ another\ actor\ at\ the\n\ given\ location,\ it\ is\ removed.\ <br\ />\n\ Precondition\:\ (1)\ This\ actor\ is\ contained\ in\ a\ grid\ (2)\n\ <code>newLocation</code>\ is\ valid\ in\ the\ grid\ of\ this\ actor\n\ @param\ newLocation\ the\ new\ location\n
comment11.params=
comment11.target=void\ act()
comment11.text=\n\ Reverses\ the\ direction\ of\ this\ actor.\ Override\ this\ method\ in\ subclasses\n\ of\ <code>Actor</code>\ to\ define\ types\ of\ actors\ with\ different\ behavior\n\ \n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=\n\ Creates\ a\ string\ that\ describes\ this\ actor.\n\ @return\ a\ string\ with\ the\ location,\ direction,\ and\ color\ of\ this\ actor\n
comment13.params=enemy
comment13.target=int\ checkRange(Actor)
comment2.params=newColor
comment2.target=void\ setColor(java.awt.Color)
comment2.text=\n\ Sets\ the\ color\ of\ this\ actor.\n\ @param\ newColor\ the\ new\ color\n
comment3.params=
comment3.target=int\ getDirection()
comment3.text=\n\ Gets\ the\ current\ direction\ of\ this\ actor.\n\ @return\ the\ direction\ of\ this\ actor,\ an\ angle\ between\ 0\ and\ 359\ degrees\n
comment4.params=newDirection
comment4.target=void\ setDirection(int)
comment4.text=\n\ Sets\ the\ current\ direction\ of\ this\ actor.\n\ @param\ newDirection\ the\ new\ direction.\ The\ direction\ of\ this\ actor\ is\ set\n\ to\ the\ angle\ between\ 0\ and\ 359\ degrees\ that\ is\ equivalent\ to\n\ <code>newDirection</code>.\n
comment5.params=
comment5.target=info.gridworld.grid.Grid\ getGrid()
comment5.text=\n\ Gets\ the\ grid\ in\ which\ this\ actor\ is\ located.\n\ @return\ the\ grid\ of\ this\ actor,\ or\ <code>null</code>\ if\ this\ actor\ is\n\ not\ contained\ in\ a\ grid\n
comment6.params=
comment6.target=info.gridworld.grid.Location\ getLocation()
comment6.text=\n\ Gets\ the\ location\ of\ this\ actor.\n\ @return\ the\ location\ of\ this\ actor,\ or\ <code>null</code>\ if\ this\ actor\ is\n\ not\ contained\ in\ a\ grid\n
comment7.params=gr\ loc
comment7.target=void\ putSelfInGrid(info.gridworld.grid.Grid,\ info.gridworld.grid.Location)
comment7.text=\n\ Puts\ this\ actor\ into\ a\ grid.\ If\ there\ is\ another\ actor\ at\ the\ given\n\ location,\ it\ is\ removed.\ <br\ />\n\ Precondition\:\ (1)\ This\ actor\ is\ not\ contained\ in\ a\ grid\ (2)\n\ <code>loc</code>\ is\ valid\ in\ <code>gr</code>\n\ @param\ gr\ the\ grid\ into\ which\ this\ actor\ should\ be\ placed\n\ @param\ loc\ the\ location\ into\ which\ the\ actor\ should\ be\ placed\n
comment8.params=
comment8.target=void\ clearGrid()
comment8.text=\n\ Removes\ this\ actor\ from\ its\ grid.\ <br\ />\n\ Precondition\:\ This\ actor\ is\ contained\ in\ a\ grid\n
comment9.params=
comment9.target=void\ removeSelfFromGrid()
numComments=14
